[{"C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\index.js":"1","C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\App.js":"2","C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\reportWebVitals.js":"3","C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\components\\home\\Home.js":"4","C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\components\\Home\\Home.js":"5","C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\components\\NetworkBackground\\NetworkBackground.js":"6","C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\components\\NetworkBackground\\CreateBackground.js":"7","C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\hooks\\useWindowSize.js":"8","C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\components\\NetworkBackground\\DestroyBackground.js":"9","C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\components\\NetworkBackground\\Canvas.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":284,"mtime":1612725776733,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":563,"mtime":1612381079983,"results":"15","hashOfConfig":"12"},{"size":589,"mtime":1612717654119,"results":"16","hashOfConfig":"12"},{"size":906,"mtime":1612716493344,"results":"17","hashOfConfig":"12"},{"size":8152,"mtime":1612716060718,"results":"18","hashOfConfig":"12"},{"size":447,"mtime":1612382054737,"results":"19","hashOfConfig":"12"},{"size":242,"mtime":1612428457306,"results":"20","hashOfConfig":"12"},{"size":805,"mtime":1612716188099,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1s6vwvw",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},"C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\index.js",[],["47","48"],"C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\App.js",[],"C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\reportWebVitals.js",[],"C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\components\\home\\Home.js",[],["49","50"],"C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\components\\Home\\Home.js",[],"C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\components\\NetworkBackground\\NetworkBackground.js",[],"C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\components\\NetworkBackground\\CreateBackground.js",["51"],"// Create a colour mask\r\nconst _getColor = ( x, width, frame ) => {\r\n    return 'hsl( hue, 80%, 50% )'.replace(\r\n        'hue', x / width * 360 + frame\r\n    );\r\n}\r\n\r\n// Create a line\r\nclass Line{\r\n    constructor(parent){\r\n        // Assign line position values\r\n        this.x1 = parent.x1 | 0;\r\n        this.y1 = parent.y1 | 0;\r\n        this.x2 = parent.x1 | 0;\r\n        this.y2 = parent.y1 | 0;\r\n        // Adjust width\r\n        this.lineWidth = parent.lineWidth / 1.25;\r\n        this.dirs = parent.dirs;\r\n        this.maxDist = parent.maxDist;\r\n        this.minDist = parent.minDist;\r\n        this.speed = parent.speed;\r\n\r\n        do{\r\n            // Choose a direction of travel\r\n            var dir = this.dirs[ ( Math.random() * this.dirs.length ) | 0 ];\r\n            this.vx = dir[ 0 ];\r\n            this.vy = dir[ 1 ];\r\n\r\n        }while(\r\n            ( this.vx === -parent.vx && this.vy === -parent.vy ) || ( this.vx === parent.vx && this.vy === parent.vy)\r\n        );\r\n        \r\n        // Establish the directional velocity\r\n        this.vx *= this.speed;\r\n        this.vy *= this.speed;\r\n    \r\n        // Establish the distance after which children can be made\r\n        this.dist = ( Math.random() * ( this.maxDist - this.minDist ) + this.minDist );\r\n    }\r\n\r\n    // Add a step for each line to take (getting dimmer, splitting etc)\r\n    step(){\r\n        this.x2 += this.vx;\r\n        this.y2 += this.vy;\r\n        \r\n        --this.dist;\r\n        \r\n        // var dead = false;\r\n\r\n        // // kill if out of screen\r\n        // if( this.x < 0 || this.x > parent.width || this.y < 0 || this.y > parent.height )\r\n        // dead = true;\r\n\r\n        // // make children :D\r\n        // if( this.dist <= 0 && this.lineWidth > 1 ) {\r\n\r\n        //     // keep yo self, sometimes\r\n        //     this.dist = Math.random() * ( parent.maxDist - parent.minDist ) + parent.minDist;\r\n\r\n        //     // add 2 children\r\n        //     if( this.lines.length < parent.maxLines ) parent.lines.push( new Line( this ) );\r\n        //     if( this.lines.length < parent.maxLines && Math.random() < .5 ) parent.lines.push( new Line( this ) );\r\n\r\n\r\n        //     // kill the poor thing\r\n        //     if( Math.random() < .2 ) dead = true;\r\n        // }\r\n  \r\n        // // Extend the line\r\n        // ctx.strokeStyle = ctx.shadowColor = getColor( this.x );\r\n        // ctx.beginPath();\r\n        // ctx.lineWidth = this.width;\r\n        // ctx.moveTo( this.x, this.y );\r\n        // ctx.lineTo( prevX, prevY );\r\n        // ctx.stroke();\r\n\r\n        // if( dead ) return true\r\n    }\r\n\r\n    endStep(){\r\n        // Bring co-ords together\r\n        this.x1 = this.x2;\r\n        this.y1 = this.y2;\r\n    }\r\n}\r\n\r\nclass LinesGenerator{\r\n    constructor(targetRef, height, width){\r\n        this.targetRef = targetRef;\r\n        this.ctx = null;\r\n        this.height = height;\r\n        this.width = width;\r\n        this.maxLines = 100;\r\n        this.initialLines = 4;\r\n        this.lines = [];\r\n        this.frame = 0;\r\n        this.timeSinceLast = 0;\r\n        //Line vars\r\n        this.starter = { // starting parent line, just a pseudo line\r\n            x1: this.width / 2,\r\n            y1: this.height / 2,\r\n            x2: this.width / 2,\r\n            y2: this.height / 2,\r\n            vx: 0,\r\n            vy: 0,\r\n            lineWidth: 10,\r\n            speed:5,\r\n            dirs: [\r\n                // straight x, y velocity\r\n                [ 0, 1 ],\r\n                [ 1, 0 ],\r\n                [ 0, -1 ],\r\n                [ -1, 0 ],\r\n                // diagonals, 0.7 = sin(PI/4) = cos(PI/4)\r\n                [ .7, .7 ],\r\n                [ .7, -.7 ],\r\n                [ -.7, .7 ],\r\n                [ -.7, -.7]\r\n            ],\r\n            minDist: 10,\r\n            maxDist: 30\r\n        };\r\n    }\r\n\r\n    // ROB - YOU ARE NOT ABLE TO ADD CHILD LINES IT SEEMS - ALSO LINES DIE TOO SOON\r\n    _spawnChildLines(thisLine){\r\n        let spawnChild = 0;\r\n        let randomKill = false;\r\n        // make children :D\r\n        if( thisLine.dist <= 0 && thisLine.lineWidth > 1 ) {\r\n            \r\n            // keep yo self, sometimes\r\n            thisLine.dist = Math.random() * ( this.maxDist - this.minDist ) + this.minDist;\r\n            \r\n            // add 2 children\r\n            if( this.lines.length < this.maxLines ) ++spawnChild;\r\n            if( this.lines.length < this.maxLines && Math.random() < .5 ) ++spawnChild;\r\n\r\n            // Allow random killing\r\n            randomKill = true\r\n        }\r\n        // Spawn the children\r\n        for(let i=0; i < spawnChild; i++){\r\n            this.lines.push(new Line(thisLine))\r\n        }\r\n\r\n        return {spawnChild, randomKill}\r\n    }\r\n\r\n    _killLine(thisLine, randomKill=false){\r\n        let dead = false;\r\n        // kill if out of screen\r\n        if( thisLine.x2 < 0 || thisLine.x2 > this.width || thisLine.y2 < 0 || thisLine.y2 > this.height )\r\n        dead = true;\r\n        // randomly kill\r\n        if( randomKill && Math.random() < .2 ) dead = true;\r\n        return dead;\r\n    }\r\n\r\n    _extendLine(thisLine){\r\n        // Draw the line\r\n        this.ctx.strokeStyle = this.ctx.shadowColor = _getColor( thisLine.x2, this.width, this.frame );\r\n        this.ctx.beginPath();\r\n        this.ctx.lineWidth = thisLine.lineWidth;\r\n        this.ctx.moveTo( thisLine.x2, thisLine.y2 );\r\n        this.ctx.lineTo( thisLine.x1, thisLine.y1 );\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    _step(){\r\n        for( var i = 0; i < this.lines.length; ++i ) {\r\n            const thisLine = this.lines[ i ];\r\n            // Move the line on one step\r\n            thisLine.step()\r\n\r\n            // Spawn children\r\n            const {_, randomKill} = this._spawnChildLines( thisLine )\r\n\r\n            // Extend line\r\n            this._extendLine(thisLine)\r\n\r\n            // Update the position variables\r\n            thisLine.endStep()\r\n\r\n            // Check if should be killed\r\n            if( this._killLine(thisLine, randomKill)) { // if true it's dead\r\n                this.lines.splice( i, 1 );\r\n                // Decement the index to account for lost thisLine\r\n                --i;\r\n            }\r\n        }\r\n\r\n        // Spawn new lines from origin\r\n        ++this.timeSinceLast\r\n        if( this.lines.length < this.maxLines && this.timeSinceLast > 10 && Math.random() < .5 ) {\r\n            this.timeSinceLast = 0;\r\n            this.lines.push( new Line( this.starter ) );\r\n            // // cover the middle;\r\n            // this.ctx.fillStyle = this.ctx.shadowColor = _getColor( this.starter.x, this.width, this.frame );\r\n            // this.ctx.beginPath();\r\n            // this.ctx.arc( this.starter.x1, this.starter.y1, this.initialWidth, 0, Math.PI * 2 );\r\n            // this.ctx.fill();\r\n        }\r\n    }\r\n\r\n    // Setup the context and line styles\r\n    _init(){\r\n        this.lines.length = 0;\r\n        \r\n        for( var i = 0; i < this.initialLines; ++i ){\r\n            this.lines.push( new Line( this.starter ) );\r\n        }\r\n        \r\n        // Create background\r\n        if(!this.ctx){\r\n            this.ctx = this.targetRef.current.getContext( '2d' );\r\n        }\r\n        this.ctx.fillStyle = '#222';\r\n        this.ctx.fillRect( 0, 0, this.width, this.height );\r\n        \r\n        // if you want a cookie ;)\r\n        this.ctx.lineCap = 'round';\r\n    }\r\n        \r\n    // Animate the lines\r\n    _anim() {\r\n\r\n        // Kill switch\r\n        // if(this.frame > 100){\r\n        //     console.log(\"KILL SWITCH\")\r\n        //     this.ctx = null;\r\n        //     return;\r\n        // }\r\n   \r\n        window.requestAnimationFrame( () => this._anim() );\r\n\r\n        ++this.frame;\r\n\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.fillStyle = 'rgba(255,255,255,.02)';\r\n        this.ctx.fillRect( 0, 0, this.width, this.height );\r\n        this.ctx.shadowBlur = .5;\r\n\r\n        this._step()\r\n    }\r\n\r\n    CreateBackground = () => {\r\n\r\n        this._init();\r\n        this._anim();\r\n    }\r\n\r\n    // Stop the animation - existing lines will fade out\r\n    stopAnim(){\r\n        console.log(\"STOP ANIM\")\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n        this.ctx = null;\r\n    }\r\n}\r\n\r\nexport default LinesGenerator;\r\n","C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\hooks\\useWindowSize.js",[],["52","53"],"C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\components\\NetworkBackground\\DestroyBackground.js",[],"C:\\Users\\cia05\\OneDrive\\Documents\\GitHub\\kismet-react\\kismet-front-end\\src\\components\\NetworkBackground\\Canvas.js",["54"],"import React, { useRef, useLayoutEffect } from 'react'\r\n\r\nimport LinesGenerator from './CreateBackground.js'\r\nimport useWindowSize from '../../hooks/useWindowSize.js'\r\n\r\nimport './canvas.module.css'\r\n\r\nfunction Canvas(props) {\r\n    const targetRef = useRef();\r\n    const [winW, winH] = useWindowSize();\r\n    const dims = { height:winH, width:winW };\r\n\r\n    // Listen for screen size changes\r\n    useLayoutEffect(() => {\r\n        if(dims.width > 0 && dims.height > 0){\r\n            // Create a new lines generator\r\n            const linesGen = (new LinesGenerator(targetRef, dims.height, dims.width));\r\n            linesGen.CreateBackground();\r\n        }\r\n    }, [dims])\r\n\r\n    return (\r\n        <canvas ref={targetRef} width={dims.width} height={dims.height}></canvas>\r\n    )\r\n}\r\n\r\nexport default Canvas\r\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"55","replacedBy":"59"},{"ruleId":"57","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":177,"column":20,"nodeType":"63","messageId":"64","endLine":177,"endColumn":21},{"ruleId":"55","replacedBy":"65"},{"ruleId":"57","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":11,"column":11,"nodeType":"69","endLine":11,"endColumn":45},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],["70"],["71"],"no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar",["70"],["71"],"react-hooks/exhaustive-deps","The 'dims' object makes the dependencies of useLayoutEffect Hook (at line 20) change on every render. To fix this, wrap the initialization of 'dims' in its own useMemo() Hook.","VariableDeclarator","no-global-assign","no-unsafe-negation"]